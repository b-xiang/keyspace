/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 2.0.0
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */


using System;
using System.Runtime.InteropServices;

class keyspace_clientPINVOKE {

  protected class SWIGExceptionHelper {

    public delegate void ExceptionDelegate(string message);
    public delegate void ExceptionArgumentDelegate(string message, string paramName);

    static ExceptionDelegate applicationDelegate = new ExceptionDelegate(SetPendingApplicationException);
    static ExceptionDelegate arithmeticDelegate = new ExceptionDelegate(SetPendingArithmeticException);
    static ExceptionDelegate divideByZeroDelegate = new ExceptionDelegate(SetPendingDivideByZeroException);
    static ExceptionDelegate indexOutOfRangeDelegate = new ExceptionDelegate(SetPendingIndexOutOfRangeException);
    static ExceptionDelegate invalidCastDelegate = new ExceptionDelegate(SetPendingInvalidCastException);
    static ExceptionDelegate invalidOperationDelegate = new ExceptionDelegate(SetPendingInvalidOperationException);
    static ExceptionDelegate ioDelegate = new ExceptionDelegate(SetPendingIOException);
    static ExceptionDelegate nullReferenceDelegate = new ExceptionDelegate(SetPendingNullReferenceException);
    static ExceptionDelegate outOfMemoryDelegate = new ExceptionDelegate(SetPendingOutOfMemoryException);
    static ExceptionDelegate overflowDelegate = new ExceptionDelegate(SetPendingOverflowException);
    static ExceptionDelegate systemDelegate = new ExceptionDelegate(SetPendingSystemException);

    static ExceptionArgumentDelegate argumentDelegate = new ExceptionArgumentDelegate(SetPendingArgumentException);
    static ExceptionArgumentDelegate argumentNullDelegate = new ExceptionArgumentDelegate(SetPendingArgumentNullException);
    static ExceptionArgumentDelegate argumentOutOfRangeDelegate = new ExceptionArgumentDelegate(SetPendingArgumentOutOfRangeException);

    [DllImport("keyspace_client", EntryPoint="SWIGRegisterExceptionCallbacks_keyspace_client")]
    public static extern void SWIGRegisterExceptionCallbacks_keyspace_client(
                                ExceptionDelegate applicationDelegate,
                                ExceptionDelegate arithmeticDelegate,
                                ExceptionDelegate divideByZeroDelegate, 
                                ExceptionDelegate indexOutOfRangeDelegate, 
                                ExceptionDelegate invalidCastDelegate,
                                ExceptionDelegate invalidOperationDelegate,
                                ExceptionDelegate ioDelegate,
                                ExceptionDelegate nullReferenceDelegate,
                                ExceptionDelegate outOfMemoryDelegate, 
                                ExceptionDelegate overflowDelegate, 
                                ExceptionDelegate systemExceptionDelegate);

    [DllImport("keyspace_client", EntryPoint="SWIGRegisterExceptionArgumentCallbacks_keyspace_client")]
    public static extern void SWIGRegisterExceptionCallbacksArgument_keyspace_client(
                                ExceptionArgumentDelegate argumentDelegate,
                                ExceptionArgumentDelegate argumentNullDelegate,
                                ExceptionArgumentDelegate argumentOutOfRangeDelegate);

    static void SetPendingApplicationException(string message) {
      SWIGPendingException.Set(new System.ApplicationException(message, SWIGPendingException.Retrieve()));
    }
    static void SetPendingArithmeticException(string message) {
      SWIGPendingException.Set(new System.ArithmeticException(message, SWIGPendingException.Retrieve()));
    }
    static void SetPendingDivideByZeroException(string message) {
      SWIGPendingException.Set(new System.DivideByZeroException(message, SWIGPendingException.Retrieve()));
    }
    static void SetPendingIndexOutOfRangeException(string message) {
      SWIGPendingException.Set(new System.IndexOutOfRangeException(message, SWIGPendingException.Retrieve()));
    }
    static void SetPendingInvalidCastException(string message) {
      SWIGPendingException.Set(new System.InvalidCastException(message, SWIGPendingException.Retrieve()));
    }
    static void SetPendingInvalidOperationException(string message) {
      SWIGPendingException.Set(new System.InvalidOperationException(message, SWIGPendingException.Retrieve()));
    }
    static void SetPendingIOException(string message) {
      SWIGPendingException.Set(new System.IO.IOException(message, SWIGPendingException.Retrieve()));
    }
    static void SetPendingNullReferenceException(string message) {
      SWIGPendingException.Set(new System.NullReferenceException(message, SWIGPendingException.Retrieve()));
    }
    static void SetPendingOutOfMemoryException(string message) {
      SWIGPendingException.Set(new System.OutOfMemoryException(message, SWIGPendingException.Retrieve()));
    }
    static void SetPendingOverflowException(string message) {
      SWIGPendingException.Set(new System.OverflowException(message, SWIGPendingException.Retrieve()));
    }
    static void SetPendingSystemException(string message) {
      SWIGPendingException.Set(new System.SystemException(message, SWIGPendingException.Retrieve()));
    }

    static void SetPendingArgumentException(string message, string paramName) {
      SWIGPendingException.Set(new System.ArgumentException(message, paramName, SWIGPendingException.Retrieve()));
    }
    static void SetPendingArgumentNullException(string message, string paramName) {
      Exception e = SWIGPendingException.Retrieve();
      if (e != null) message = message + " Inner Exception: " + e.Message;
      SWIGPendingException.Set(new System.ArgumentNullException(paramName, message));
    }
    static void SetPendingArgumentOutOfRangeException(string message, string paramName) {
      Exception e = SWIGPendingException.Retrieve();
      if (e != null) message = message + " Inner Exception: " + e.Message;
      SWIGPendingException.Set(new System.ArgumentOutOfRangeException(paramName, message));
    }

    static SWIGExceptionHelper() {
      SWIGRegisterExceptionCallbacks_keyspace_client(
                                applicationDelegate,
                                arithmeticDelegate,
                                divideByZeroDelegate,
                                indexOutOfRangeDelegate,
                                invalidCastDelegate,
                                invalidOperationDelegate,
                                ioDelegate,
                                nullReferenceDelegate,
                                outOfMemoryDelegate,
                                overflowDelegate,
                                systemDelegate);

      SWIGRegisterExceptionCallbacksArgument_keyspace_client(
                                argumentDelegate,
                                argumentNullDelegate,
                                argumentOutOfRangeDelegate);
    }
  }

  protected static SWIGExceptionHelper swigExceptionHelper = new SWIGExceptionHelper();

  public class SWIGPendingException {
    [ThreadStatic]
    private static Exception pendingException = null;
    private static int numExceptionsPending = 0;

    public static bool Pending {
      get {
        bool pending = false;
        if (numExceptionsPending > 0)
          if (pendingException != null)
            pending = true;
        return pending;
      } 
    }

    public static void Set(Exception e) {
      if (pendingException != null)
        throw new ApplicationException("FATAL: An earlier pending exception from unmanaged code was missed and thus not thrown (" + pendingException.ToString() + ")", e);
      pendingException = e;
      lock(typeof(keyspace_clientPINVOKE)) {
        numExceptionsPending++;
      }
    }

    public static Exception Retrieve() {
      Exception e = null;
      if (numExceptionsPending > 0) {
        if (pendingException != null) {
          e = pendingException;
          pendingException = null;
          lock(typeof(keyspace_clientPINVOKE)) {
            numExceptionsPending--;
          }
        }
      }
      return e;
    }
  }


  protected class SWIGStringHelper {

    public delegate string SWIGStringDelegate(string message);
    static SWIGStringDelegate stringDelegate = new SWIGStringDelegate(CreateString);

    [DllImport("keyspace_client", EntryPoint="SWIGRegisterStringCallback_keyspace_client")]
    public static extern void SWIGRegisterStringCallback_keyspace_client(SWIGStringDelegate stringDelegate);

    static string CreateString(string cString) {
      return cString;
    }

    static SWIGStringHelper() {
      SWIGRegisterStringCallback_keyspace_client(stringDelegate);
    }
  }

  static protected SWIGStringHelper swigStringHelper = new SWIGStringHelper();


  static keyspace_clientPINVOKE() {
  }


  protected class SWIGWStringHelper {

    public delegate string SWIGWStringDelegate(IntPtr message);
    static SWIGWStringDelegate wstringDelegate = new SWIGWStringDelegate(CreateWString);

    [DllImport("keyspace_client", EntryPoint="SWIGRegisterWStringCallback_keyspace_client")]
    public static extern void SWIGRegisterWStringCallback_keyspace_client(SWIGWStringDelegate wstringDelegate);

    static string CreateWString([MarshalAs(UnmanagedType.LPWStr)]IntPtr cString) {
      return System.Runtime.InteropServices.Marshal.PtrToStringUni(cString);
    }

    static SWIGWStringHelper() {
      SWIGRegisterWStringCallback_keyspace_client(wstringDelegate);
    }
  }

  static protected SWIGWStringHelper swigWStringHelper = new SWIGWStringHelper();


  [DllImport("keyspace_client", EntryPoint="CSharp_imaxdiv_t_quot_set")]
  public static extern void imaxdiv_t_quot_set(HandleRef jarg1, long jarg2);

  [DllImport("keyspace_client", EntryPoint="CSharp_imaxdiv_t_quot_get")]
  public static extern long imaxdiv_t_quot_get(HandleRef jarg1);

  [DllImport("keyspace_client", EntryPoint="CSharp_imaxdiv_t_rem_set")]
  public static extern void imaxdiv_t_rem_set(HandleRef jarg1, long jarg2);

  [DllImport("keyspace_client", EntryPoint="CSharp_imaxdiv_t_rem_get")]
  public static extern long imaxdiv_t_rem_get(HandleRef jarg1);

  [DllImport("keyspace_client", EntryPoint="CSharp_new_imaxdiv_t")]
  public static extern IntPtr new_imaxdiv_t();

  [DllImport("keyspace_client", EntryPoint="CSharp_delete_imaxdiv_t")]
  public static extern void delete_imaxdiv_t(HandleRef jarg1);

  [DllImport("keyspace_client", EntryPoint="CSharp_imaxabs")]
  public static extern long imaxabs(long jarg1);

  [DllImport("keyspace_client", EntryPoint="CSharp_imaxdiv")]
  public static extern IntPtr imaxdiv(long jarg1, long jarg2);

  [DllImport("keyspace_client", EntryPoint="CSharp_strtoimax")]
  public static extern long strtoimax(string jarg1, HandleRef jarg2, int jarg3);

  [DllImport("keyspace_client", EntryPoint="CSharp_strtoumax")]
  public static extern ulong strtoumax(string jarg1, HandleRef jarg2, int jarg3);

  [DllImport("keyspace_client", EntryPoint="CSharp_new_Keyspace_NodeParams")]
  public static extern IntPtr new_Keyspace_NodeParams(int jarg1);

  [DllImport("keyspace_client", EntryPoint="CSharp_delete_Keyspace_NodeParams")]
  public static extern void delete_Keyspace_NodeParams(HandleRef jarg1);

  [DllImport("keyspace_client", EntryPoint="CSharp_Keyspace_NodeParams_Close")]
  public static extern void Keyspace_NodeParams_Close(HandleRef jarg1);

  [DllImport("keyspace_client", EntryPoint="CSharp_Keyspace_NodeParams_AddNode")]
  public static extern void Keyspace_NodeParams_AddNode(HandleRef jarg1, string jarg2);

  [DllImport("keyspace_client", EntryPoint="CSharp_Keyspace_NodeParams_nodec_set")]
  public static extern void Keyspace_NodeParams_nodec_set(HandleRef jarg1, int jarg2);

  [DllImport("keyspace_client", EntryPoint="CSharp_Keyspace_NodeParams_nodec_get")]
  public static extern int Keyspace_NodeParams_nodec_get(HandleRef jarg1);

  [DllImport("keyspace_client", EntryPoint="CSharp_Keyspace_NodeParams_nodes_set")]
  public static extern void Keyspace_NodeParams_nodes_set(HandleRef jarg1, HandleRef jarg2);

  [DllImport("keyspace_client", EntryPoint="CSharp_Keyspace_NodeParams_nodes_get")]
  public static extern IntPtr Keyspace_NodeParams_nodes_get(HandleRef jarg1);

  [DllImport("keyspace_client", EntryPoint="CSharp_Keyspace_NodeParams_num_set")]
  public static extern void Keyspace_NodeParams_num_set(HandleRef jarg1, int jarg2);

  [DllImport("keyspace_client", EntryPoint="CSharp_Keyspace_NodeParams_num_get")]
  public static extern int Keyspace_NodeParams_num_get(HandleRef jarg1);

  [DllImport("keyspace_client", EntryPoint="CSharp_Keyspace_ResultBegin")]
  public static extern void Keyspace_ResultBegin(HandleRef jarg1);

  [DllImport("keyspace_client", EntryPoint="CSharp_Keyspace_ResultNext")]
  public static extern void Keyspace_ResultNext(HandleRef jarg1);

  [DllImport("keyspace_client", EntryPoint="CSharp_Keyspace_ResultIsEnd")]
  public static extern bool Keyspace_ResultIsEnd(HandleRef jarg1);

  [DllImport("keyspace_client", EntryPoint="CSharp_Keyspace_ResultClose")]
  public static extern void Keyspace_ResultClose(HandleRef jarg1);

  [DllImport("keyspace_client", EntryPoint="CSharp_Keyspace_ResultKey")]
  public static extern string Keyspace_ResultKey(HandleRef jarg1);

  [DllImport("keyspace_client", EntryPoint="CSharp_Keyspace_ResultValue")]
  public static extern string Keyspace_ResultValue(HandleRef jarg1);

  [DllImport("keyspace_client", EntryPoint="CSharp_Keyspace_ResultTransportStatus")]
  public static extern int Keyspace_ResultTransportStatus(HandleRef jarg1);

  [DllImport("keyspace_client", EntryPoint="CSharp_Keyspace_ResultConnectivityStatus")]
  public static extern int Keyspace_ResultConnectivityStatus(HandleRef jarg1);

  [DllImport("keyspace_client", EntryPoint="CSharp_Keyspace_ResultTimeoutStatus")]
  public static extern int Keyspace_ResultTimeoutStatus(HandleRef jarg1);

  [DllImport("keyspace_client", EntryPoint="CSharp_Keyspace_ResultCommandStatus")]
  public static extern int Keyspace_ResultCommandStatus(HandleRef jarg1);

  [DllImport("keyspace_client", EntryPoint="CSharp_Keyspace_Create")]
  public static extern IntPtr Keyspace_Create();

  [DllImport("keyspace_client", EntryPoint="CSharp_Keyspace_Init")]
  public static extern int Keyspace_Init(HandleRef jarg1, HandleRef jarg2);

  [DllImport("keyspace_client", EntryPoint="CSharp_Keyspace_Destroy")]
  public static extern void Keyspace_Destroy(HandleRef jarg1);

  [DllImport("keyspace_client", EntryPoint="CSharp_Keyspace_GetResult")]
  public static extern IntPtr Keyspace_GetResult(HandleRef jarg1);

  [DllImport("keyspace_client", EntryPoint="CSharp_Keyspace_SetGlobalTimeout")]
  public static extern void Keyspace_SetGlobalTimeout(HandleRef jarg1, ulong jarg2);

  [DllImport("keyspace_client", EntryPoint="CSharp_Keyspace_SetMasterTimeout")]
  public static extern void Keyspace_SetMasterTimeout(HandleRef jarg1, ulong jarg2);

  [DllImport("keyspace_client", EntryPoint="CSharp_Keyspace_GetGlobalTimeout")]
  public static extern ulong Keyspace_GetGlobalTimeout(HandleRef jarg1);

  [DllImport("keyspace_client", EntryPoint="CSharp_Keyspace_GetMasterTimeout")]
  public static extern ulong Keyspace_GetMasterTimeout(HandleRef jarg1);

  [DllImport("keyspace_client", EntryPoint="CSharp_Keyspace_GetMaster")]
  public static extern int Keyspace_GetMaster(HandleRef jarg1);

  [DllImport("keyspace_client", EntryPoint="CSharp_Keyspace_DistributeDirty")]
  public static extern void Keyspace_DistributeDirty(HandleRef jarg1, bool jarg2);

  [DllImport("keyspace_client", EntryPoint="CSharp_Keyspace_Get")]
  public static extern int Keyspace_Get(HandleRef jarg1, string jarg2);

  [DllImport("keyspace_client", EntryPoint="CSharp_Keyspace_DirtyGet")]
  public static extern int Keyspace_DirtyGet(HandleRef jarg1, string jarg2);

  [DllImport("keyspace_client", EntryPoint="CSharp_Keyspace_Count")]
  public static extern int Keyspace_Count(HandleRef jarg1, string jarg2, string jarg3, ulong jarg4, bool jarg5, bool jarg6);

  [DllImport("keyspace_client", EntryPoint="CSharp_Keyspace_CountStr")]
  public static extern int Keyspace_CountStr(HandleRef jarg1, string jarg2, string jarg3, string jarg4, bool jarg5, bool jarg6);

  [DllImport("keyspace_client", EntryPoint="CSharp_Keyspace_DirtyCount")]
  public static extern int Keyspace_DirtyCount(HandleRef jarg1, string jarg2, string jarg3, ulong jarg4, bool jarg5, bool jarg6);

  [DllImport("keyspace_client", EntryPoint="CSharp_Keyspace_DirtyCountStr")]
  public static extern int Keyspace_DirtyCountStr(HandleRef jarg1, string jarg2, string jarg3, string jarg4, bool jarg5, bool jarg6);

  [DllImport("keyspace_client", EntryPoint="CSharp_Keyspace_ListKeys")]
  public static extern int Keyspace_ListKeys(HandleRef jarg1, string jarg2, string jarg3, ulong jarg4, bool jarg5, bool jarg6);

  [DllImport("keyspace_client", EntryPoint="CSharp_Keyspace_ListKeysStr")]
  public static extern int Keyspace_ListKeysStr(HandleRef jarg1, string jarg2, string jarg3, string jarg4, bool jarg5, bool jarg6);

  [DllImport("keyspace_client", EntryPoint="CSharp_Keyspace_DirtyListKeys")]
  public static extern int Keyspace_DirtyListKeys(HandleRef jarg1, string jarg2, string jarg3, ulong jarg4, bool jarg5, bool jarg6);

  [DllImport("keyspace_client", EntryPoint="CSharp_Keyspace_DirtyListKeysStr")]
  public static extern int Keyspace_DirtyListKeysStr(HandleRef jarg1, string jarg2, string jarg3, string jarg4, bool jarg5, bool jarg6);

  [DllImport("keyspace_client", EntryPoint="CSharp_Keyspace_ListKeyValues")]
  public static extern int Keyspace_ListKeyValues(HandleRef jarg1, string jarg2, string jarg3, ulong jarg4, bool jarg5, bool jarg6);

  [DllImport("keyspace_client", EntryPoint="CSharp_Keyspace_ListKeyValuesStr")]
  public static extern int Keyspace_ListKeyValuesStr(HandleRef jarg1, string jarg2, string jarg3, string jarg4, bool jarg5, bool jarg6);

  [DllImport("keyspace_client", EntryPoint="CSharp_Keyspace_DirtyListKeyValues")]
  public static extern int Keyspace_DirtyListKeyValues(HandleRef jarg1, string jarg2, string jarg3, ulong jarg4, bool jarg5, bool jarg6);

  [DllImport("keyspace_client", EntryPoint="CSharp_Keyspace_DirtyListKeyValuesStr")]
  public static extern int Keyspace_DirtyListKeyValuesStr(HandleRef jarg1, string jarg2, string jarg3, string jarg4, bool jarg5, bool jarg6);

  [DllImport("keyspace_client", EntryPoint="CSharp_Keyspace_Set")]
  public static extern int Keyspace_Set(HandleRef jarg1, string jarg2, string jarg3);

  [DllImport("keyspace_client", EntryPoint="CSharp_Keyspace_TestAndSet")]
  public static extern int Keyspace_TestAndSet(HandleRef jarg1, string jarg2, string jarg3, string jarg4);

  [DllImport("keyspace_client", EntryPoint="CSharp_Keyspace_Add")]
  public static extern int Keyspace_Add(HandleRef jarg1, string jarg2, long jarg3);

  [DllImport("keyspace_client", EntryPoint="CSharp_Keyspace_AddStr")]
  public static extern int Keyspace_AddStr(HandleRef jarg1, string jarg2, string jarg3);

  [DllImport("keyspace_client", EntryPoint="CSharp_Keyspace_Delete")]
  public static extern int Keyspace_Delete(HandleRef jarg1, string jarg2);

  [DllImport("keyspace_client", EntryPoint="CSharp_Keyspace_Remove")]
  public static extern int Keyspace_Remove(HandleRef jarg1, string jarg2);

  [DllImport("keyspace_client", EntryPoint="CSharp_Keyspace_Rename")]
  public static extern int Keyspace_Rename(HandleRef jarg1, string jarg2, string jarg3);

  [DllImport("keyspace_client", EntryPoint="CSharp_Keyspace_Prune")]
  public static extern int Keyspace_Prune(HandleRef jarg1, string jarg2);

  [DllImport("keyspace_client", EntryPoint="CSharp_Keyspace_Begin")]
  public static extern int Keyspace_Begin(HandleRef jarg1);

  [DllImport("keyspace_client", EntryPoint="CSharp_Keyspace_Submit")]
  public static extern int Keyspace_Submit(HandleRef jarg1);

  [DllImport("keyspace_client", EntryPoint="CSharp_Keyspace_Cancel")]
  public static extern int Keyspace_Cancel(HandleRef jarg1);

  [DllImport("keyspace_client", EntryPoint="CSharp_Keyspace_IsBatched")]
  public static extern bool Keyspace_IsBatched(HandleRef jarg1);

  [DllImport("keyspace_client", EntryPoint="CSharp_Keyspace_SetTrace")]
  public static extern void Keyspace_SetTrace(bool jarg1);
}
