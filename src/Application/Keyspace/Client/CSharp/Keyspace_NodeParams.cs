/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 2.0.0
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */


using System;
using System.Runtime.InteropServices;

public class Keyspace_NodeParams : IDisposable {
  private HandleRef swigCPtr;
  protected bool swigCMemOwn;

  internal Keyspace_NodeParams(IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new HandleRef(this, cPtr);
  }

  internal static HandleRef getCPtr(Keyspace_NodeParams obj) {
    return (obj == null) ? new HandleRef(null, IntPtr.Zero) : obj.swigCPtr;
  }

  ~Keyspace_NodeParams() {
    Dispose();
  }

  public virtual void Dispose() {
    lock(this) {
      if (swigCPtr.Handle != IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          keyspace_clientPINVOKE.delete_Keyspace_NodeParams(swigCPtr);
        }
        swigCPtr = new HandleRef(null, IntPtr.Zero);
      }
      GC.SuppressFinalize(this);
    }
  }

  public Keyspace_NodeParams(int nodec_) : this(keyspace_clientPINVOKE.new_Keyspace_NodeParams(nodec_), true) {
  }

  public void Close() {
    keyspace_clientPINVOKE.Keyspace_NodeParams_Close(swigCPtr);
  }

  public void AddNode(string node) {
    keyspace_clientPINVOKE.Keyspace_NodeParams_AddNode(swigCPtr, node);
    if (keyspace_clientPINVOKE.SWIGPendingException.Pending) throw keyspace_clientPINVOKE.SWIGPendingException.Retrieve();
  }

  public int nodec {
    set {
      keyspace_clientPINVOKE.Keyspace_NodeParams_nodec_set(swigCPtr, value);
    } 
    get {
      int ret = keyspace_clientPINVOKE.Keyspace_NodeParams_nodec_get(swigCPtr);
      return ret;
    } 
  }

  public SWIGTYPE_p_p_char nodes {
    set {
      keyspace_clientPINVOKE.Keyspace_NodeParams_nodes_set(swigCPtr, SWIGTYPE_p_p_char.getCPtr(value));
    } 
    get {
      IntPtr cPtr = keyspace_clientPINVOKE.Keyspace_NodeParams_nodes_get(swigCPtr);
      SWIGTYPE_p_p_char ret = (cPtr == IntPtr.Zero) ? null : new SWIGTYPE_p_p_char(cPtr, false);
      return ret;
    } 
  }

  public int num {
    set {
      keyspace_clientPINVOKE.Keyspace_NodeParams_num_set(swigCPtr, value);
    } 
    get {
      int ret = keyspace_clientPINVOKE.Keyspace_NodeParams_num_get(swigCPtr);
      return ret;
    } 
  }

}
