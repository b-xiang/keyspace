/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 2.0.0
 * 
 * This file is not intended to be easily readable and contains a number of 
 * coding conventions designed to improve portability and efficiency. Do not make
 * changes to this file unless you know what you are doing--modify the SWIG 
 * interface file instead. 
 * ----------------------------------------------------------------------------- */

#define SWIGCSHARP


#ifdef __cplusplus
/* SwigValueWrapper is described in swig.swg */
template<typename T> class SwigValueWrapper {
  struct SwigMovePointer {
    T *ptr;
    SwigMovePointer(T *p) : ptr(p) { }
    ~SwigMovePointer() { delete ptr; }
    SwigMovePointer& operator=(SwigMovePointer& rhs) { T* oldptr = ptr; ptr = 0; delete oldptr; ptr = rhs.ptr; rhs.ptr = 0; return *this; }
  } pointer;
  SwigValueWrapper& operator=(const SwigValueWrapper<T>& rhs);
  SwigValueWrapper(const SwigValueWrapper<T>& rhs);
public:
  SwigValueWrapper() : pointer(0) { }
  SwigValueWrapper& operator=(const T& t) { SwigMovePointer tmp(new T(t)); pointer = tmp; return *this; }
  operator T&() const { return *pointer.ptr; }
  T *operator&() { return pointer.ptr; }
};

template <typename T> T SwigValueInit() {
  return T();
}
#endif

/* -----------------------------------------------------------------------------
 *  This section contains generic SWIG labels for method/variable
 *  declarations/attributes, and other compiler dependent labels.
 * ----------------------------------------------------------------------------- */

/* template workaround for compilers that cannot correctly implement the C++ standard */
#ifndef SWIGTEMPLATEDISAMBIGUATOR
# if defined(__SUNPRO_CC) && (__SUNPRO_CC <= 0x560)
#  define SWIGTEMPLATEDISAMBIGUATOR template
# elif defined(__HP_aCC)
/* Needed even with `aCC -AA' when `aCC -V' reports HP ANSI C++ B3910B A.03.55 */
/* If we find a maximum version that requires this, the test would be __HP_aCC <= 35500 for A.03.55 */
#  define SWIGTEMPLATEDISAMBIGUATOR template
# else
#  define SWIGTEMPLATEDISAMBIGUATOR
# endif
#endif

/* inline attribute */
#ifndef SWIGINLINE
# if defined(__cplusplus) || (defined(__GNUC__) && !defined(__STRICT_ANSI__))
#   define SWIGINLINE inline
# else
#   define SWIGINLINE
# endif
#endif

/* attribute recognised by some compilers to avoid 'unused' warnings */
#ifndef SWIGUNUSED
# if defined(__GNUC__)
#   if !(defined(__cplusplus)) || (__GNUC__ > 3 || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4))
#     define SWIGUNUSED __attribute__ ((__unused__)) 
#   else
#     define SWIGUNUSED
#   endif
# elif defined(__ICC)
#   define SWIGUNUSED __attribute__ ((__unused__)) 
# else
#   define SWIGUNUSED 
# endif
#endif

#ifndef SWIG_MSC_UNSUPPRESS_4505
# if defined(_MSC_VER)
#   pragma warning(disable : 4505) /* unreferenced local function has been removed */
# endif 
#endif

#ifndef SWIGUNUSEDPARM
# ifdef __cplusplus
#   define SWIGUNUSEDPARM(p)
# else
#   define SWIGUNUSEDPARM(p) p SWIGUNUSED 
# endif
#endif

/* internal SWIG method */
#ifndef SWIGINTERN
# define SWIGINTERN static SWIGUNUSED
#endif

/* internal inline SWIG method */
#ifndef SWIGINTERNINLINE
# define SWIGINTERNINLINE SWIGINTERN SWIGINLINE
#endif

/* exporting methods */
#if (__GNUC__ >= 4) || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4)
#  ifndef GCC_HASCLASSVISIBILITY
#    define GCC_HASCLASSVISIBILITY
#  endif
#endif

#ifndef SWIGEXPORT
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   if defined(STATIC_LINKED)
#     define SWIGEXPORT
#   else
#     define SWIGEXPORT __declspec(dllexport)
#   endif
# else
#   if defined(__GNUC__) && defined(GCC_HASCLASSVISIBILITY)
#     define SWIGEXPORT __attribute__ ((visibility("default")))
#   else
#     define SWIGEXPORT
#   endif
# endif
#endif

/* calling conventions for Windows */
#ifndef SWIGSTDCALL
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   define SWIGSTDCALL __stdcall
# else
#   define SWIGSTDCALL
# endif 
#endif

/* Deal with Microsoft's attempt at deprecating C standard runtime functions */
#if !defined(SWIG_NO_CRT_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_CRT_SECURE_NO_DEPRECATE)
# define _CRT_SECURE_NO_DEPRECATE
#endif

/* Deal with Microsoft's attempt at deprecating methods in the standard C++ library */
#if !defined(SWIG_NO_SCL_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_SCL_SECURE_NO_DEPRECATE)
# define _SCL_SECURE_NO_DEPRECATE
#endif



#include <stdlib.h>
#include <string.h>
#include <stdio.h>


/* Support for throwing C# exceptions from C/C++. There are two types: 
 * Exceptions that take a message and ArgumentExceptions that take a message and a parameter name. */
typedef enum {
  SWIG_CSharpApplicationException,
  SWIG_CSharpArithmeticException,
  SWIG_CSharpDivideByZeroException,
  SWIG_CSharpIndexOutOfRangeException,
  SWIG_CSharpInvalidCastException,
  SWIG_CSharpInvalidOperationException,
  SWIG_CSharpIOException,
  SWIG_CSharpNullReferenceException,
  SWIG_CSharpOutOfMemoryException,
  SWIG_CSharpOverflowException,
  SWIG_CSharpSystemException
} SWIG_CSharpExceptionCodes;

typedef enum {
  SWIG_CSharpArgumentException,
  SWIG_CSharpArgumentNullException,
  SWIG_CSharpArgumentOutOfRangeException
} SWIG_CSharpExceptionArgumentCodes;

typedef void (SWIGSTDCALL* SWIG_CSharpExceptionCallback_t)(const char *);
typedef void (SWIGSTDCALL* SWIG_CSharpExceptionArgumentCallback_t)(const char *, const char *);

typedef struct {
  SWIG_CSharpExceptionCodes code;
  SWIG_CSharpExceptionCallback_t callback;
} SWIG_CSharpException_t;

typedef struct {
  SWIG_CSharpExceptionArgumentCodes code;
  SWIG_CSharpExceptionArgumentCallback_t callback;
} SWIG_CSharpExceptionArgument_t;

static SWIG_CSharpException_t SWIG_csharp_exceptions[] = {
  { SWIG_CSharpApplicationException, NULL },
  { SWIG_CSharpArithmeticException, NULL },
  { SWIG_CSharpDivideByZeroException, NULL },
  { SWIG_CSharpIndexOutOfRangeException, NULL },
  { SWIG_CSharpInvalidCastException, NULL },
  { SWIG_CSharpInvalidOperationException, NULL },
  { SWIG_CSharpIOException, NULL },
  { SWIG_CSharpNullReferenceException, NULL },
  { SWIG_CSharpOutOfMemoryException, NULL },
  { SWIG_CSharpOverflowException, NULL },
  { SWIG_CSharpSystemException, NULL }
};

static SWIG_CSharpExceptionArgument_t SWIG_csharp_exceptions_argument[] = {
  { SWIG_CSharpArgumentException, NULL },
  { SWIG_CSharpArgumentNullException, NULL },
  { SWIG_CSharpArgumentOutOfRangeException, NULL }
};

static void SWIGUNUSED SWIG_CSharpSetPendingException(SWIG_CSharpExceptionCodes code, const char *msg) {
  SWIG_CSharpExceptionCallback_t callback = SWIG_csharp_exceptions[SWIG_CSharpApplicationException].callback;
  if ((size_t)code < sizeof(SWIG_csharp_exceptions)/sizeof(SWIG_CSharpException_t)) {
    callback = SWIG_csharp_exceptions[code].callback;
  }
  callback(msg);
}

static void SWIGUNUSED SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpExceptionArgumentCodes code, const char *msg, const char *param_name) {
  SWIG_CSharpExceptionArgumentCallback_t callback = SWIG_csharp_exceptions_argument[SWIG_CSharpArgumentException].callback;
  if ((size_t)code < sizeof(SWIG_csharp_exceptions_argument)/sizeof(SWIG_CSharpExceptionArgument_t)) {
    callback = SWIG_csharp_exceptions_argument[code].callback;
  }
  callback(msg, param_name);
}


#ifdef __cplusplus
extern "C" 
#endif
SWIGEXPORT void SWIGSTDCALL SWIGRegisterExceptionCallbacks_keyspace_client(
                                                SWIG_CSharpExceptionCallback_t applicationCallback,
                                                SWIG_CSharpExceptionCallback_t arithmeticCallback,
                                                SWIG_CSharpExceptionCallback_t divideByZeroCallback, 
                                                SWIG_CSharpExceptionCallback_t indexOutOfRangeCallback, 
                                                SWIG_CSharpExceptionCallback_t invalidCastCallback,
                                                SWIG_CSharpExceptionCallback_t invalidOperationCallback,
                                                SWIG_CSharpExceptionCallback_t ioCallback,
                                                SWIG_CSharpExceptionCallback_t nullReferenceCallback,
                                                SWIG_CSharpExceptionCallback_t outOfMemoryCallback, 
                                                SWIG_CSharpExceptionCallback_t overflowCallback, 
                                                SWIG_CSharpExceptionCallback_t systemCallback) {
  SWIG_csharp_exceptions[SWIG_CSharpApplicationException].callback = applicationCallback;
  SWIG_csharp_exceptions[SWIG_CSharpArithmeticException].callback = arithmeticCallback;
  SWIG_csharp_exceptions[SWIG_CSharpDivideByZeroException].callback = divideByZeroCallback;
  SWIG_csharp_exceptions[SWIG_CSharpIndexOutOfRangeException].callback = indexOutOfRangeCallback;
  SWIG_csharp_exceptions[SWIG_CSharpInvalidCastException].callback = invalidCastCallback;
  SWIG_csharp_exceptions[SWIG_CSharpInvalidOperationException].callback = invalidOperationCallback;
  SWIG_csharp_exceptions[SWIG_CSharpIOException].callback = ioCallback;
  SWIG_csharp_exceptions[SWIG_CSharpNullReferenceException].callback = nullReferenceCallback;
  SWIG_csharp_exceptions[SWIG_CSharpOutOfMemoryException].callback = outOfMemoryCallback;
  SWIG_csharp_exceptions[SWIG_CSharpOverflowException].callback = overflowCallback;
  SWIG_csharp_exceptions[SWIG_CSharpSystemException].callback = systemCallback;
}

#ifdef __cplusplus
extern "C" 
#endif
SWIGEXPORT void SWIGSTDCALL SWIGRegisterExceptionArgumentCallbacks_keyspace_client(
                                                SWIG_CSharpExceptionArgumentCallback_t argumentCallback,
                                                SWIG_CSharpExceptionArgumentCallback_t argumentNullCallback,
                                                SWIG_CSharpExceptionArgumentCallback_t argumentOutOfRangeCallback) {
  SWIG_csharp_exceptions_argument[SWIG_CSharpArgumentException].callback = argumentCallback;
  SWIG_csharp_exceptions_argument[SWIG_CSharpArgumentNullException].callback = argumentNullCallback;
  SWIG_csharp_exceptions_argument[SWIG_CSharpArgumentOutOfRangeException].callback = argumentOutOfRangeCallback;
}


/* Callback for returning strings to C# without leaking memory */
typedef char * (SWIGSTDCALL* SWIG_CSharpStringHelperCallback)(const char *);
static SWIG_CSharpStringHelperCallback SWIG_csharp_string_callback = NULL;


#ifdef __cplusplus
extern "C" 
#endif
SWIGEXPORT void SWIGSTDCALL SWIGRegisterStringCallback_keyspace_client(SWIG_CSharpStringHelperCallback callback) {
  SWIG_csharp_string_callback = callback;
}


/* Contract support */

#define SWIG_contract_assert(nullreturn, expr, msg) if (!(expr)) {SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, msg, ""); return nullreturn; } else

/*  Errors in SWIG */
#define  SWIG_UnknownError    	   -1 
#define  SWIG_IOError        	   -2 
#define  SWIG_RuntimeError   	   -3 
#define  SWIG_IndexError     	   -4 
#define  SWIG_TypeError      	   -5 
#define  SWIG_DivisionByZero 	   -6 
#define  SWIG_OverflowError  	   -7 
#define  SWIG_SyntaxError    	   -8 
#define  SWIG_ValueError     	   -9 
#define  SWIG_SystemError    	   -10
#define  SWIG_AttributeError 	   -11
#define  SWIG_MemoryError    	   -12 
#define  SWIG_NullReferenceError   -13




/* Callback for returning strings to C# without leaking memory */
typedef void * (SWIGSTDCALL* SWIG_CSharpWStringHelperCallback)(const wchar_t *);
static SWIG_CSharpWStringHelperCallback SWIG_csharp_wstring_callback = NULL;


#ifdef __cplusplus
extern "C"
#endif
SWIGEXPORT void SWIGSTDCALL SWIGRegisterWStringCallback_keyspace_client(SWIG_CSharpWStringHelperCallback callback) {
  SWIG_csharp_wstring_callback = callback;
}


#include <stdexcept>


#include <string>


#include <vector>
#include <algorithm>
#include <stdexcept>


#include <map>
#include <algorithm>
#include <stdexcept>


SWIGINTERN void SWIG_CSharpException(int code, const char *msg) {
  if (code == SWIG_ValueError) {
    SWIG_CSharpExceptionArgumentCodes exception_code = SWIG_CSharpArgumentOutOfRangeException;
    SWIG_CSharpSetPendingExceptionArgument(exception_code, msg, 0);
  } else {
    SWIG_CSharpExceptionCodes exception_code = SWIG_CSharpApplicationException;
    switch(code) {
    case SWIG_MemoryError:
      exception_code = SWIG_CSharpOutOfMemoryException;
      break;
    case SWIG_IndexError:
      exception_code = SWIG_CSharpIndexOutOfRangeException;
      break;
    case SWIG_DivisionByZero:
      exception_code = SWIG_CSharpDivideByZeroException;
      break;
    case SWIG_IOError:
      exception_code = SWIG_CSharpIOException;
      break;
    case SWIG_OverflowError:
      exception_code = SWIG_CSharpOverflowException;
      break;
    case SWIG_RuntimeError:
    case SWIG_TypeError:
    case SWIG_SyntaxError:
    case SWIG_SystemError:
    case SWIG_UnknownError:
    default:
      exception_code = SWIG_CSharpApplicationException;
      break;
    }
    SWIG_CSharpSetPendingException(exception_code, msg);
  }
}


#include <stdexcept>


#include <utility>


#include <inttypes.h>


#include <stdint.h>		// Use the C99 official header


/* Includes the header in the wrapper code */
#define SWIG_FILE_WITH_INIT
#include "../KeyspaceClientWrap.h"


#ifdef __cplusplus
extern "C" {
#endif

SWIGEXPORT void SWIGSTDCALL CSharp_imaxdiv_t_quot_set(void * jarg1, long long jarg2) {
  imaxdiv_t *arg1 = (imaxdiv_t *) 0 ;
  long long arg2 ;
  
  arg1 = (imaxdiv_t *)jarg1; 
  arg2 = (long long)jarg2; 
  if (arg1) (arg1)->quot = arg2;
}


SWIGEXPORT long long SWIGSTDCALL CSharp_imaxdiv_t_quot_get(void * jarg1) {
  long long jresult ;
  imaxdiv_t *arg1 = (imaxdiv_t *) 0 ;
  long long result;
  
  arg1 = (imaxdiv_t *)jarg1; 
  result = (long long) ((arg1)->quot);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_imaxdiv_t_rem_set(void * jarg1, long long jarg2) {
  imaxdiv_t *arg1 = (imaxdiv_t *) 0 ;
  long long arg2 ;
  
  arg1 = (imaxdiv_t *)jarg1; 
  arg2 = (long long)jarg2; 
  if (arg1) (arg1)->rem = arg2;
}


SWIGEXPORT long long SWIGSTDCALL CSharp_imaxdiv_t_rem_get(void * jarg1) {
  long long jresult ;
  imaxdiv_t *arg1 = (imaxdiv_t *) 0 ;
  long long result;
  
  arg1 = (imaxdiv_t *)jarg1; 
  result = (long long) ((arg1)->rem);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_imaxdiv_t() {
  void * jresult ;
  imaxdiv_t *result = 0 ;
  
  result = (imaxdiv_t *)new imaxdiv_t();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_imaxdiv_t(void * jarg1) {
  imaxdiv_t *arg1 = (imaxdiv_t *) 0 ;
  
  arg1 = (imaxdiv_t *)jarg1; 
  delete arg1;
}


SWIGEXPORT long long SWIGSTDCALL CSharp_imaxabs(long long jarg1) {
  long long jresult ;
  intmax_t arg1 ;
  intmax_t result;
  
  arg1 = (intmax_t)jarg1; 
  result = (intmax_t)imaxabs(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_imaxdiv(long long jarg1, long long jarg2) {
  void * jresult ;
  intmax_t arg1 ;
  intmax_t arg2 ;
  imaxdiv_t result;
  
  arg1 = (intmax_t)jarg1; 
  arg2 = (intmax_t)jarg2; 
  result = imaxdiv(arg1,arg2);
  jresult = new imaxdiv_t((const imaxdiv_t &)result); 
  return jresult;
}


SWIGEXPORT long long SWIGSTDCALL CSharp_strtoimax(char * jarg1, void * jarg2, int jarg3) {
  long long jresult ;
  char *arg1 = (char *) 0 ;
  char **arg2 = (char **) 0 ;
  int arg3 ;
  intmax_t result;
  
  arg1 = (char *)jarg1; 
  arg2 = (char **)jarg2; 
  arg3 = (int)jarg3; 
  result = (intmax_t)strtoimax((char const *)arg1,arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned long long SWIGSTDCALL CSharp_strtoumax(char * jarg1, void * jarg2, int jarg3) {
  unsigned long long jresult ;
  char *arg1 = (char *) 0 ;
  char **arg2 = (char **) 0 ;
  int arg3 ;
  uintmax_t result;
  
  arg1 = (char *)jarg1; 
  arg2 = (char **)jarg2; 
  arg3 = (int)jarg3; 
  result = (uintmax_t)strtoumax((char const *)arg1,arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_Keyspace_NodeParams(int jarg1) {
  void * jresult ;
  int arg1 ;
  Keyspace_NodeParams *result = 0 ;
  
  arg1 = (int)jarg1; 
  result = (Keyspace_NodeParams *)new Keyspace_NodeParams(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_Keyspace_NodeParams(void * jarg1) {
  Keyspace_NodeParams *arg1 = (Keyspace_NodeParams *) 0 ;
  
  arg1 = (Keyspace_NodeParams *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Keyspace_NodeParams_Close(void * jarg1) {
  Keyspace_NodeParams *arg1 = (Keyspace_NodeParams *) 0 ;
  
  arg1 = (Keyspace_NodeParams *)jarg1; 
  (arg1)->Close();
}


SWIGEXPORT void SWIGSTDCALL CSharp_Keyspace_NodeParams_AddNode(void * jarg1, char * jarg2) {
  Keyspace_NodeParams *arg1 = (Keyspace_NodeParams *) 0 ;
  std::string *arg2 = 0 ;
  
  arg1 = (Keyspace_NodeParams *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  (arg1)->AddNode((std::string const &)*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Keyspace_NodeParams_nodec_set(void * jarg1, int jarg2) {
  Keyspace_NodeParams *arg1 = (Keyspace_NodeParams *) 0 ;
  int arg2 ;
  
  arg1 = (Keyspace_NodeParams *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->nodec = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Keyspace_NodeParams_nodec_get(void * jarg1) {
  int jresult ;
  Keyspace_NodeParams *arg1 = (Keyspace_NodeParams *) 0 ;
  int result;
  
  arg1 = (Keyspace_NodeParams *)jarg1; 
  result = (int) ((arg1)->nodec);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Keyspace_NodeParams_nodes_set(void * jarg1, void * jarg2) {
  Keyspace_NodeParams *arg1 = (Keyspace_NodeParams *) 0 ;
  char **arg2 = (char **) 0 ;
  
  arg1 = (Keyspace_NodeParams *)jarg1; 
  arg2 = (char **)jarg2; 
  if (arg1) (arg1)->nodes = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Keyspace_NodeParams_nodes_get(void * jarg1) {
  void * jresult ;
  Keyspace_NodeParams *arg1 = (Keyspace_NodeParams *) 0 ;
  char **result = 0 ;
  
  arg1 = (Keyspace_NodeParams *)jarg1; 
  result = (char **) ((arg1)->nodes);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Keyspace_NodeParams_num_set(void * jarg1, int jarg2) {
  Keyspace_NodeParams *arg1 = (Keyspace_NodeParams *) 0 ;
  int arg2 ;
  
  arg1 = (Keyspace_NodeParams *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->num = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Keyspace_NodeParams_num_get(void * jarg1) {
  int jresult ;
  Keyspace_NodeParams *arg1 = (Keyspace_NodeParams *) 0 ;
  int result;
  
  arg1 = (Keyspace_NodeParams *)jarg1; 
  result = (int) ((arg1)->num);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Keyspace_ResultBegin(void * jarg1) {
  ResultObj arg1 = (ResultObj) 0 ;
  
  arg1 = (ResultObj)jarg1; 
  Keyspace_ResultBegin(arg1);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Keyspace_ResultNext(void * jarg1) {
  ResultObj arg1 = (ResultObj) 0 ;
  
  arg1 = (ResultObj)jarg1; 
  Keyspace_ResultNext(arg1);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Keyspace_ResultIsEnd(void * jarg1) {
  unsigned int jresult ;
  ResultObj arg1 = (ResultObj) 0 ;
  bool result;
  
  arg1 = (ResultObj)jarg1; 
  result = (bool)Keyspace_ResultIsEnd(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Keyspace_ResultClose(void * jarg1) {
  ResultObj arg1 = (ResultObj) 0 ;
  
  arg1 = (ResultObj)jarg1; 
  Keyspace_ResultClose(arg1);
}


SWIGEXPORT char * SWIGSTDCALL CSharp_Keyspace_ResultKey(void * jarg1) {
  char * jresult ;
  ResultObj arg1 = (ResultObj) 0 ;
  std::string result;
  
  arg1 = (ResultObj)jarg1; 
  result = Keyspace_ResultKey(arg1);
  jresult = SWIG_csharp_string_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_Keyspace_ResultValue(void * jarg1) {
  char * jresult ;
  ResultObj arg1 = (ResultObj) 0 ;
  std::string result;
  
  arg1 = (ResultObj)jarg1; 
  result = Keyspace_ResultValue(arg1);
  jresult = SWIG_csharp_string_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Keyspace_ResultTransportStatus(void * jarg1) {
  int jresult ;
  ResultObj arg1 = (ResultObj) 0 ;
  int result;
  
  arg1 = (ResultObj)jarg1; 
  result = (int)Keyspace_ResultTransportStatus(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Keyspace_ResultConnectivityStatus(void * jarg1) {
  int jresult ;
  ResultObj arg1 = (ResultObj) 0 ;
  int result;
  
  arg1 = (ResultObj)jarg1; 
  result = (int)Keyspace_ResultConnectivityStatus(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Keyspace_ResultTimeoutStatus(void * jarg1) {
  int jresult ;
  ResultObj arg1 = (ResultObj) 0 ;
  int result;
  
  arg1 = (ResultObj)jarg1; 
  result = (int)Keyspace_ResultTimeoutStatus(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Keyspace_ResultCommandStatus(void * jarg1) {
  int jresult ;
  ResultObj arg1 = (ResultObj) 0 ;
  int result;
  
  arg1 = (ResultObj)jarg1; 
  result = (int)Keyspace_ResultCommandStatus(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Keyspace_Create() {
  void * jresult ;
  ClientObj result;
  
  result = (ClientObj)Keyspace_Create();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Keyspace_Init(void * jarg1, void * jarg2) {
  int jresult ;
  ClientObj arg1 = (ClientObj) 0 ;
  Keyspace_NodeParams *arg2 = 0 ;
  int result;
  
  arg1 = (ClientObj)jarg1; 
  arg2 = (Keyspace_NodeParams *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Keyspace_NodeParams const & type is null", 0);
    return 0;
  } 
  result = (int)Keyspace_Init(arg1,(Keyspace_NodeParams const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Keyspace_Destroy(void * jarg1) {
  ClientObj arg1 = (ClientObj) 0 ;
  
  arg1 = (ClientObj)jarg1; 
  Keyspace_Destroy(arg1);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Keyspace_GetResult(void * jarg1) {
  void * jresult ;
  ClientObj arg1 = (ClientObj) 0 ;
  ResultObj result;
  
  arg1 = (ClientObj)jarg1; 
  result = (ResultObj)Keyspace_GetResult(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Keyspace_SetGlobalTimeout(void * jarg1, unsigned long long jarg2) {
  ClientObj arg1 = (ClientObj) 0 ;
  uint64_t arg2 ;
  
  arg1 = (ClientObj)jarg1; 
  arg2 = (uint64_t)jarg2; 
  Keyspace_SetGlobalTimeout(arg1,arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Keyspace_SetMasterTimeout(void * jarg1, unsigned long long jarg2) {
  ClientObj arg1 = (ClientObj) 0 ;
  uint64_t arg2 ;
  
  arg1 = (ClientObj)jarg1; 
  arg2 = (uint64_t)jarg2; 
  Keyspace_SetMasterTimeout(arg1,arg2);
}


SWIGEXPORT unsigned long long SWIGSTDCALL CSharp_Keyspace_GetGlobalTimeout(void * jarg1) {
  unsigned long long jresult ;
  ClientObj arg1 = (ClientObj) 0 ;
  uint64_t result;
  
  arg1 = (ClientObj)jarg1; 
  result = (uint64_t)Keyspace_GetGlobalTimeout(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned long long SWIGSTDCALL CSharp_Keyspace_GetMasterTimeout(void * jarg1) {
  unsigned long long jresult ;
  ClientObj arg1 = (ClientObj) 0 ;
  uint64_t result;
  
  arg1 = (ClientObj)jarg1; 
  result = (uint64_t)Keyspace_GetMasterTimeout(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Keyspace_GetMaster(void * jarg1) {
  int jresult ;
  ClientObj arg1 = (ClientObj) 0 ;
  int result;
  
  arg1 = (ClientObj)jarg1; 
  result = (int)Keyspace_GetMaster(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Keyspace_DistributeDirty(void * jarg1, unsigned int jarg2) {
  ClientObj arg1 = (ClientObj) 0 ;
  bool arg2 ;
  
  arg1 = (ClientObj)jarg1; 
  arg2 = jarg2 ? true : false; 
  Keyspace_DistributeDirty(arg1,arg2);
}


SWIGEXPORT int SWIGSTDCALL CSharp_Keyspace_Get(void * jarg1, char * jarg2) {
  int jresult ;
  ClientObj arg1 = (ClientObj) 0 ;
  std::string *arg2 = 0 ;
  int result;
  
  arg1 = (ClientObj)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  result = (int)Keyspace_Get(arg1,(std::string const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Keyspace_DirtyGet(void * jarg1, char * jarg2) {
  int jresult ;
  ClientObj arg1 = (ClientObj) 0 ;
  std::string *arg2 = 0 ;
  int result;
  
  arg1 = (ClientObj)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  result = (int)Keyspace_DirtyGet(arg1,(std::string const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Keyspace_Count(void * jarg1, char * jarg2, char * jarg3, unsigned long long jarg4, unsigned int jarg5, unsigned int jarg6) {
  int jresult ;
  ClientObj arg1 = (ClientObj) 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  uint64_t arg4 ;
  bool arg5 ;
  bool arg6 ;
  int result;
  
  arg1 = (ClientObj)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  if (!jarg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg3_str(jarg3);
  arg3 = &arg3_str; 
  arg4 = (uint64_t)jarg4; 
  arg5 = jarg5 ? true : false; 
  arg6 = jarg6 ? true : false; 
  result = (int)Keyspace_Count(arg1,(std::string const &)*arg2,(std::string const &)*arg3,arg4,arg5,arg6);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Keyspace_CountStr(void * jarg1, char * jarg2, char * jarg3, char * jarg4, unsigned int jarg5, unsigned int jarg6) {
  int jresult ;
  ClientObj arg1 = (ClientObj) 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  std::string *arg4 = 0 ;
  bool arg5 ;
  bool arg6 ;
  int result;
  
  arg1 = (ClientObj)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  if (!jarg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg3_str(jarg3);
  arg3 = &arg3_str; 
  if (!jarg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg4_str(jarg4);
  arg4 = &arg4_str; 
  arg5 = jarg5 ? true : false; 
  arg6 = jarg6 ? true : false; 
  result = (int)Keyspace_CountStr(arg1,(std::string const &)*arg2,(std::string const &)*arg3,(std::string const &)*arg4,arg5,arg6);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Keyspace_DirtyCount(void * jarg1, char * jarg2, char * jarg3, unsigned long long jarg4, unsigned int jarg5, unsigned int jarg6) {
  int jresult ;
  ClientObj arg1 = (ClientObj) 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  uint64_t arg4 ;
  bool arg5 ;
  bool arg6 ;
  int result;
  
  arg1 = (ClientObj)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  if (!jarg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg3_str(jarg3);
  arg3 = &arg3_str; 
  arg4 = (uint64_t)jarg4; 
  arg5 = jarg5 ? true : false; 
  arg6 = jarg6 ? true : false; 
  result = (int)Keyspace_DirtyCount(arg1,(std::string const &)*arg2,(std::string const &)*arg3,arg4,arg5,arg6);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Keyspace_DirtyCountStr(void * jarg1, char * jarg2, char * jarg3, char * jarg4, unsigned int jarg5, unsigned int jarg6) {
  int jresult ;
  ClientObj arg1 = (ClientObj) 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  std::string *arg4 = 0 ;
  bool arg5 ;
  bool arg6 ;
  int result;
  
  arg1 = (ClientObj)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  if (!jarg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg3_str(jarg3);
  arg3 = &arg3_str; 
  if (!jarg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg4_str(jarg4);
  arg4 = &arg4_str; 
  arg5 = jarg5 ? true : false; 
  arg6 = jarg6 ? true : false; 
  result = (int)Keyspace_DirtyCountStr(arg1,(std::string const &)*arg2,(std::string const &)*arg3,(std::string const &)*arg4,arg5,arg6);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Keyspace_ListKeys(void * jarg1, char * jarg2, char * jarg3, unsigned long long jarg4, unsigned int jarg5, unsigned int jarg6) {
  int jresult ;
  ClientObj arg1 = (ClientObj) 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  uint64_t arg4 ;
  bool arg5 ;
  bool arg6 ;
  int result;
  
  arg1 = (ClientObj)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  if (!jarg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg3_str(jarg3);
  arg3 = &arg3_str; 
  arg4 = (uint64_t)jarg4; 
  arg5 = jarg5 ? true : false; 
  arg6 = jarg6 ? true : false; 
  result = (int)Keyspace_ListKeys(arg1,(std::string const &)*arg2,(std::string const &)*arg3,arg4,arg5,arg6);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Keyspace_ListKeysStr(void * jarg1, char * jarg2, char * jarg3, char * jarg4, unsigned int jarg5, unsigned int jarg6) {
  int jresult ;
  ClientObj arg1 = (ClientObj) 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  std::string *arg4 = 0 ;
  bool arg5 ;
  bool arg6 ;
  int result;
  
  arg1 = (ClientObj)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  if (!jarg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg3_str(jarg3);
  arg3 = &arg3_str; 
  if (!jarg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg4_str(jarg4);
  arg4 = &arg4_str; 
  arg5 = jarg5 ? true : false; 
  arg6 = jarg6 ? true : false; 
  result = (int)Keyspace_ListKeysStr(arg1,(std::string const &)*arg2,(std::string const &)*arg3,(std::string const &)*arg4,arg5,arg6);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Keyspace_DirtyListKeys(void * jarg1, char * jarg2, char * jarg3, unsigned long long jarg4, unsigned int jarg5, unsigned int jarg6) {
  int jresult ;
  ClientObj arg1 = (ClientObj) 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  uint64_t arg4 ;
  bool arg5 ;
  bool arg6 ;
  int result;
  
  arg1 = (ClientObj)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  if (!jarg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg3_str(jarg3);
  arg3 = &arg3_str; 
  arg4 = (uint64_t)jarg4; 
  arg5 = jarg5 ? true : false; 
  arg6 = jarg6 ? true : false; 
  result = (int)Keyspace_DirtyListKeys(arg1,(std::string const &)*arg2,(std::string const &)*arg3,arg4,arg5,arg6);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Keyspace_DirtyListKeysStr(void * jarg1, char * jarg2, char * jarg3, char * jarg4, unsigned int jarg5, unsigned int jarg6) {
  int jresult ;
  ClientObj arg1 = (ClientObj) 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  std::string *arg4 = 0 ;
  bool arg5 ;
  bool arg6 ;
  int result;
  
  arg1 = (ClientObj)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  if (!jarg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg3_str(jarg3);
  arg3 = &arg3_str; 
  if (!jarg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg4_str(jarg4);
  arg4 = &arg4_str; 
  arg5 = jarg5 ? true : false; 
  arg6 = jarg6 ? true : false; 
  result = (int)Keyspace_DirtyListKeysStr(arg1,(std::string const &)*arg2,(std::string const &)*arg3,(std::string const &)*arg4,arg5,arg6);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Keyspace_ListKeyValues(void * jarg1, char * jarg2, char * jarg3, unsigned long long jarg4, unsigned int jarg5, unsigned int jarg6) {
  int jresult ;
  ClientObj arg1 = (ClientObj) 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  uint64_t arg4 ;
  bool arg5 ;
  bool arg6 ;
  int result;
  
  arg1 = (ClientObj)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  if (!jarg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg3_str(jarg3);
  arg3 = &arg3_str; 
  arg4 = (uint64_t)jarg4; 
  arg5 = jarg5 ? true : false; 
  arg6 = jarg6 ? true : false; 
  result = (int)Keyspace_ListKeyValues(arg1,(std::string const &)*arg2,(std::string const &)*arg3,arg4,arg5,arg6);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Keyspace_ListKeyValuesStr(void * jarg1, char * jarg2, char * jarg3, char * jarg4, unsigned int jarg5, unsigned int jarg6) {
  int jresult ;
  ClientObj arg1 = (ClientObj) 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  std::string *arg4 = 0 ;
  bool arg5 ;
  bool arg6 ;
  int result;
  
  arg1 = (ClientObj)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  if (!jarg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg3_str(jarg3);
  arg3 = &arg3_str; 
  if (!jarg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg4_str(jarg4);
  arg4 = &arg4_str; 
  arg5 = jarg5 ? true : false; 
  arg6 = jarg6 ? true : false; 
  result = (int)Keyspace_ListKeyValuesStr(arg1,(std::string const &)*arg2,(std::string const &)*arg3,(std::string const &)*arg4,arg5,arg6);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Keyspace_DirtyListKeyValues(void * jarg1, char * jarg2, char * jarg3, unsigned long long jarg4, unsigned int jarg5, unsigned int jarg6) {
  int jresult ;
  ClientObj arg1 = (ClientObj) 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  uint64_t arg4 ;
  bool arg5 ;
  bool arg6 ;
  int result;
  
  arg1 = (ClientObj)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  if (!jarg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg3_str(jarg3);
  arg3 = &arg3_str; 
  arg4 = (uint64_t)jarg4; 
  arg5 = jarg5 ? true : false; 
  arg6 = jarg6 ? true : false; 
  result = (int)Keyspace_DirtyListKeyValues(arg1,(std::string const &)*arg2,(std::string const &)*arg3,arg4,arg5,arg6);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Keyspace_DirtyListKeyValuesStr(void * jarg1, char * jarg2, char * jarg3, char * jarg4, unsigned int jarg5, unsigned int jarg6) {
  int jresult ;
  ClientObj arg1 = (ClientObj) 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  std::string *arg4 = 0 ;
  bool arg5 ;
  bool arg6 ;
  int result;
  
  arg1 = (ClientObj)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  if (!jarg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg3_str(jarg3);
  arg3 = &arg3_str; 
  if (!jarg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg4_str(jarg4);
  arg4 = &arg4_str; 
  arg5 = jarg5 ? true : false; 
  arg6 = jarg6 ? true : false; 
  result = (int)Keyspace_DirtyListKeyValuesStr(arg1,(std::string const &)*arg2,(std::string const &)*arg3,(std::string const &)*arg4,arg5,arg6);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Keyspace_Set(void * jarg1, char * jarg2, char * jarg3) {
  int jresult ;
  ClientObj arg1 = (ClientObj) 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  int result;
  
  arg1 = (ClientObj)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  if (!jarg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg3_str(jarg3);
  arg3 = &arg3_str; 
  result = (int)Keyspace_Set(arg1,(std::string const &)*arg2,(std::string const &)*arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Keyspace_TestAndSet(void * jarg1, char * jarg2, char * jarg3, char * jarg4) {
  int jresult ;
  ClientObj arg1 = (ClientObj) 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  std::string *arg4 = 0 ;
  int result;
  
  arg1 = (ClientObj)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  if (!jarg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg3_str(jarg3);
  arg3 = &arg3_str; 
  if (!jarg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg4_str(jarg4);
  arg4 = &arg4_str; 
  result = (int)Keyspace_TestAndSet(arg1,(std::string const &)*arg2,(std::string const &)*arg3,(std::string const &)*arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Keyspace_Add(void * jarg1, char * jarg2, long long jarg3) {
  int jresult ;
  ClientObj arg1 = (ClientObj) 0 ;
  std::string *arg2 = 0 ;
  int64_t arg3 ;
  int result;
  
  arg1 = (ClientObj)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  arg3 = (int64_t)jarg3; 
  result = (int)Keyspace_Add(arg1,(std::string const &)*arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Keyspace_AddStr(void * jarg1, char * jarg2, char * jarg3) {
  int jresult ;
  ClientObj arg1 = (ClientObj) 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  int result;
  
  arg1 = (ClientObj)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  if (!jarg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg3_str(jarg3);
  arg3 = &arg3_str; 
  result = (int)Keyspace_AddStr(arg1,(std::string const &)*arg2,(std::string const &)*arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Keyspace_Delete(void * jarg1, char * jarg2) {
  int jresult ;
  ClientObj arg1 = (ClientObj) 0 ;
  std::string *arg2 = 0 ;
  int result;
  
  arg1 = (ClientObj)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  result = (int)Keyspace_Delete(arg1,(std::string const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Keyspace_Remove(void * jarg1, char * jarg2) {
  int jresult ;
  ClientObj arg1 = (ClientObj) 0 ;
  std::string *arg2 = 0 ;
  int result;
  
  arg1 = (ClientObj)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  result = (int)Keyspace_Remove(arg1,(std::string const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Keyspace_Rename(void * jarg1, char * jarg2, char * jarg3) {
  int jresult ;
  ClientObj arg1 = (ClientObj) 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  int result;
  
  arg1 = (ClientObj)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  if (!jarg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg3_str(jarg3);
  arg3 = &arg3_str; 
  result = (int)Keyspace_Rename(arg1,(std::string const &)*arg2,(std::string const &)*arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Keyspace_Prune(void * jarg1, char * jarg2) {
  int jresult ;
  ClientObj arg1 = (ClientObj) 0 ;
  std::string *arg2 = 0 ;
  int result;
  
  arg1 = (ClientObj)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  result = (int)Keyspace_Prune(arg1,(std::string const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Keyspace_SetExpiry(void * jarg1, char * jarg2, int jarg3) {
  int jresult ;
  ClientObj arg1 = (ClientObj) 0 ;
  std::string *arg2 = 0 ;
  int arg3 ;
  int result;
  
  arg1 = (ClientObj)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  arg3 = (int)jarg3; 
  result = (int)Keyspace_SetExpiry(arg1,(std::string const &)*arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Keyspace_RemoveExpiry(void * jarg1, char * jarg2) {
  int jresult ;
  ClientObj arg1 = (ClientObj) 0 ;
  std::string *arg2 = 0 ;
  int result;
  
  arg1 = (ClientObj)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  result = (int)Keyspace_RemoveExpiry(arg1,(std::string const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Keyspace_ClearExpiries(void * jarg1) {
  int jresult ;
  ClientObj arg1 = (ClientObj) 0 ;
  int result;
  
  arg1 = (ClientObj)jarg1; 
  result = (int)Keyspace_ClearExpiries(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Keyspace_Begin(void * jarg1) {
  int jresult ;
  ClientObj arg1 = (ClientObj) 0 ;
  int result;
  
  arg1 = (ClientObj)jarg1; 
  result = (int)Keyspace_Begin(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Keyspace_Submit(void * jarg1) {
  int jresult ;
  ClientObj arg1 = (ClientObj) 0 ;
  int result;
  
  arg1 = (ClientObj)jarg1; 
  result = (int)Keyspace_Submit(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Keyspace_Cancel(void * jarg1) {
  int jresult ;
  ClientObj arg1 = (ClientObj) 0 ;
  int result;
  
  arg1 = (ClientObj)jarg1; 
  result = (int)Keyspace_Cancel(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Keyspace_IsBatched(void * jarg1) {
  unsigned int jresult ;
  ClientObj arg1 = (ClientObj) 0 ;
  bool result;
  
  arg1 = (ClientObj)jarg1; 
  result = (bool)Keyspace_IsBatched(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Keyspace_SetTrace(unsigned int jarg1) {
  bool arg1 ;
  
  arg1 = jarg1 ? true : false; 
  Keyspace_SetTrace(arg1);
}


#ifdef __cplusplus
}
#endif

